from typing import List

class Solution:
    def strongPasswordChecker(self, password: str) -> int:
        n = len(password)
        
        missing_lower = 1
        missing_upper = 1
        missing_digit = 1
        for ch in password:
            if ch.islower():
                missing_lower = 0
            if ch.isupper():
                missing_upper = 0
            if ch.isdigit():
                missing_digit = 0
        missing_types = missing_lower + missing_upper + missing_digit
        
        total_replace = 0  # replacements needed for repeating groups
        one_mod = 0        # count of groups where (length % 3 == 0)
        two_mod = 0        # count of groups where (length % 3 == 1)
        i = 0
        while i < n:
            j = i
            while j < n and password[j] == password[i]:
                j += 1
            length = j - i
            if length >= 3:
                total_replace += length // 3
                if length % 3 == 0:
                    one_mod += 1
                elif length % 3 == 1:
                    two_mod += 1
            i = j
        
        if n < 6:
            return max(missing_types, 6 - n)
        
        if n <= 20:
            return max(missing_types, total_replace)
        
        delete_needed = n - 20
        
        used = min(delete_needed, one_mod)
        total_replace -= used
        delete_needed -= used
        
        used = min(delete_needed, two_mod * 2)
        total_replace -= used // 2
        delete_needed -= used
        
        total_replace -= delete_needed // 3
        total_replace = max(total_replace, 0)
        
        return (n - 20) + max(missing_types, total_replace)
